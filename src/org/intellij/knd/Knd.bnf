{
  parserClass="org.intellij.knd.parser.KndParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Knd"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.knd.psi"
  psiImplPackage="org.intellij.knd.psi.impl"

  elementTypeHolderClass="org.intellij.knd.psi.KndTypes"
  elementTypeClass="org.intellij.knd.psi.KndElementType"
  tokenTypeClass="org.intellij.knd.psi.KndTokenType"
}

ROOT ::= DEF_BEGIN (DELIM C_END?)?

// Def begin

DEF_BEGIN ::= def_item_*

private def_item_ ::= DEF_DEFINITION | COMMENT

DEF_DEFINITION ::= DEF_KEY DEF_SEPARATOR DEF_VALUE

DEF_KEY ::= (DEF_KEY_KNOWN | DEF_KEY_UNKNOWN) (DEF_DOT DEF_PLATFORM)?

// C end, based on ANSI C Yacc grammar

C_PRIMARY_EXPRESSION ::= C_IDENTIFIER | C_CONSTANT | C_STRING | C_L_PAREN C_EXPRESSION C_R_PAREN | C_GENERIC_SELECTION

C_CONSTANT ::= C_I_CONSTANT		/* includes character_constant */
	| C_F_CONSTANT | C_ENUMERATION_CONSTANT	/* after it has been defined as such */

C_ENUMERATION_CONSTANT ::= C_IDENTIFIER	/* before it has been defined as such */

C_STRING ::= C_STRING_LITERAL | C_FUNC_NAME

C_GENERIC_SELECTION	::= C_GENERIC C_L_PAREN C_ASSIGNMENT_EXPRESSION C_COMMA C_GENERIC_ASSOC_LIST C_R_PAREN

C_GENERIC_ASSOC_LIST ::= C_GENERIC_ASSOC_LIST_A | C_GENERIC_ASSOC_LIST_B
private C_GENERIC_ASSOC_LIST_A ::= C_GENERIC_ASSOC_LIST C_COMMA C_GENERIC_ASSOCIATION {extends=C_GENERIC_ASSOC_LIST}
private C_GENERIC_ASSOC_LIST_B ::= C_GENERIC_ASSOCIATION {extends=C_GENERIC_ASSOC_LIST}

C_GENERIC_ASSOCIATION ::= C_TYPE_NAME C_COLON C_ASSIGNMENT_EXPRESSION
	| C_DEFAULT C_COLON C_ASSIGNMENT_EXPRESSION

C_POSTFIX_EXPRESSION ::= C_POSTFIX_EXPRESSION_A	| C_POSTFIX_EXPRESSION_B | C_POSTFIX_EXPRESSION_C
	| C_POSTFIX_EXPRESSION_D | C_POSTFIX_EXPRESSION_E | C_POSTFIX_EXPRESSION_F | C_POSTFIX_EXPRESSION_G
	| C_POSTFIX_EXPRESSION_H | C_POSTFIX_EXPRESSION_I | C_POSTFIX_EXPRESSION_J
private C_POSTFIX_EXPRESSION_A ::= C_POSTFIX_EXPRESSION C_L_BRACKET C_EXPRESSION C_R_BRACKET {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_B ::= C_POSTFIX_EXPRESSION C_L_PAREN C_R_PAREN {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_C ::= C_POSTFIX_EXPRESSION C_L_PAREN C_ARGUMENT_EXPRESSION_LIST C_R_PAREN {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_D ::= C_POSTFIX_EXPRESSION C_DOT C_IDENTIFIER {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_E ::= C_POSTFIX_EXPRESSION C_PTR_OP C_IDENTIFIER {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_F ::= C_POSTFIX_EXPRESSION C_INC_OP {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_G ::= C_POSTFIX_EXPRESSION C_DEC_OP {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_H ::= C_L_PAREN C_TYPE_NAME C_R_PAREN C_L_CURLY C_INITIALIZER_LIST C_R_CURLY {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_I ::= C_L_PAREN C_TYPE_NAME C_R_PAREN C_L_CURLY C_INITIALIZER_LIST C_COMMA C_R_CURLY {extends=C_POSTFIX_EXPRESSION}
private C_POSTFIX_EXPRESSION_J ::= C_PRIMARY_EXPRESSION {extends=C_POSTFIX_EXPRESSION}

C_ARGUMENT_EXPRESSION_LIST ::= C_ARGUMENT_EXPRESSION_LIST_A | C_ARGUMENT_EXPRESSION_LIST_B
private C_ARGUMENT_EXPRESSION_LIST_A ::= C_ARGUMENT_EXPRESSION_LIST C_COMMA C_ASSIGNMENT_EXPRESSION {extends=C_ARGUMENT_EXPRESSION_LIST}
private C_ARGUMENT_EXPRESSION_LIST_B ::= C_ASSIGNMENT_EXPRESSION {extends=C_ARGUMENT_EXPRESSION_LIST}

C_UNARY_EXPRESSION ::= C_POSTFIX_EXPRESSION
	| C_INC_OP C_UNARY_EXPRESSION
	| C_DEC_OP C_UNARY_EXPRESSION
	| C_UNARY_OPERATOR C_CAST_EXPRESSION
	| C_SIZEOF C_UNARY_EXPRESSION
	| C_SIZEOF C_L_PAREN C_TYPE_NAME C_R_PAREN
	| C_ALIGNOF C_L_PAREN C_TYPE_NAME C_R_PAREN

C_UNARY_OPERATOR ::= C_AND | C_MULT	| C_PLUS | C_MINUS | C_TILDE | C_EX_MARK

C_CAST_EXPRESSION ::= C_UNARY_EXPRESSION | C_L_PAREN C_TYPE_NAME C_R_PAREN C_CAST_EXPRESSION

C_MULTIPLICATIVE_EXPRESSION	::= C_MULTIPLICATIVE_EXPRESSION_A | C_MULTIPLICATIVE_EXPRESSION_B
    | C_MULTIPLICATIVE_EXPRESSION_C | C_MULTIPLICATIVE_EXPRESSION_D
private C_MULTIPLICATIVE_EXPRESSION_A ::= C_MULTIPLICATIVE_EXPRESSION C_MULT C_CAST_EXPRESSION {extends=C_MULTIPLICATIVE_EXPRESSION}
private C_MULTIPLICATIVE_EXPRESSION_B ::= C_MULTIPLICATIVE_EXPRESSION C_SLASH C_CAST_EXPRESSION {extends=C_MULTIPLICATIVE_EXPRESSION}
private C_MULTIPLICATIVE_EXPRESSION_C ::= C_MULTIPLICATIVE_EXPRESSION C_PERCENT C_CAST_EXPRESSION {extends=C_MULTIPLICATIVE_EXPRESSION}
private C_MULTIPLICATIVE_EXPRESSION_D ::= C_CAST_EXPRESSION {extends=C_MULTIPLICATIVE_EXPRESSION}

C_ADDITIVE_EXPRESSION ::= C_ADDITIVE_EXPRESSION_A | C_ADDITIVE_EXPRESSION_B | C_ADDITIVE_EXPRESSION_C
private C_ADDITIVE_EXPRESSION_A ::= C_ADDITIVE_EXPRESSION C_PLUS C_MULTIPLICATIVE_EXPRESSION {extends=C_ADDITIVE_EXPRESSION}
private C_ADDITIVE_EXPRESSION_B ::= C_ADDITIVE_EXPRESSION C_MINUS C_MULTIPLICATIVE_EXPRESSION {extends=C_ADDITIVE_EXPRESSION}
private C_ADDITIVE_EXPRESSION_C ::= C_MULTIPLICATIVE_EXPRESSION {extends=C_ADDITIVE_EXPRESSION}

C_SHIFT_EXPRESSION ::= C_SHIFT_EXPRESSION_A | C_SHIFT_EXPRESSION_B | C_SHIFT_EXPRESSION_C
private C_SHIFT_EXPRESSION_A ::= C_SHIFT_EXPRESSION C_LEFT_OP C_ADDITIVE_EXPRESSION {extends=C_SHIFT_EXPRESSION}
private C_SHIFT_EXPRESSION_B ::= C_SHIFT_EXPRESSION C_RIGHT_OP C_ADDITIVE_EXPRESSION {extends=C_SHIFT_EXPRESSION}
private C_SHIFT_EXPRESSION_C ::= C_ADDITIVE_EXPRESSION {extends=C_SHIFT_EXPRESSION}

C_RELATIONAL_EXPRESSION	::= C_RELATIONAL_EXPRESSION_A | C_RELATIONAL_EXPRESSION_B
    | C_RELATIONAL_EXPRESSION_C | C_RELATIONAL_EXPRESSION_D | C_RELATIONAL_EXPRESSION_E
private C_RELATIONAL_EXPRESSION_A ::= C_RELATIONAL_EXPRESSION C_LESS C_SHIFT_EXPRESSION {extends=C_RELATIONAL_EXPRESSION}
private C_RELATIONAL_EXPRESSION_B ::= C_RELATIONAL_EXPRESSION C_GREATER C_SHIFT_EXPRESSION {extends=C_RELATIONAL_EXPRESSION}
private C_RELATIONAL_EXPRESSION_C ::= C_RELATIONAL_EXPRESSION C_LE_OP C_SHIFT_EXPRESSION {extends=C_RELATIONAL_EXPRESSION}
private C_RELATIONAL_EXPRESSION_D ::= C_RELATIONAL_EXPRESSION C_GE_OP C_SHIFT_EXPRESSION {extends=C_RELATIONAL_EXPRESSION}
private C_RELATIONAL_EXPRESSION_E ::= C_SHIFT_EXPRESSION {extends=C_RELATIONAL_EXPRESSION}

C_EQUALITY_EXPRESSION ::= C_EQUALITY_EXPRESSION_A | C_EQUALITY_EXPRESSION_B | C_EQUALITY_EXPRESSION_C
private C_EQUALITY_EXPRESSION_A ::= C_EQUALITY_EXPRESSION C_EQ_OP C_RELATIONAL_EXPRESSION {extends=C_EQUALITY_EXPRESSION}
private C_EQUALITY_EXPRESSION_B ::= C_EQUALITY_EXPRESSION C_NE_OP C_RELATIONAL_EXPRESSION {extends=C_EQUALITY_EXPRESSION}
private C_EQUALITY_EXPRESSION_C ::= C_RELATIONAL_EXPRESSION {extends=C_EQUALITY_EXPRESSION}

C_AND_EXPRESSION ::= C_AND_EXPRESSION_A | C_AND_EXPRESSION_B
private C_AND_EXPRESSION_A ::= C_AND_EXPRESSION C_AND C_EQUALITY_EXPRESSION {extends=C_AND_EXPRESSION}
private C_AND_EXPRESSION_B ::= C_EQUALITY_EXPRESSION {extends=C_AND_EXPRESSION}

C_EXCLUSIVE_OR_EXPRESSION ::= C_EXCLUSIVE_OR_EXPRESSION_A | C_EXCLUSIVE_OR_EXPRESSION_B
private C_EXCLUSIVE_OR_EXPRESSION_A ::= C_EXCLUSIVE_OR_EXPRESSION C_CARET C_AND_EXPRESSION {extends=C_EXCLUSIVE_OR_EXPRESSION}
private C_EXCLUSIVE_OR_EXPRESSION_B ::= C_AND_EXPRESSION {extends=C_EXCLUSIVE_OR_EXPRESSION}

C_INCLUSIVE_OR_EXPRESSION ::= C_INCLUSIVE_OR_EXPRESSION_A | C_INCLUSIVE_OR_EXPRESSION_B
private C_INCLUSIVE_OR_EXPRESSION_A ::= C_INCLUSIVE_OR_EXPRESSION C_VBAR C_EXCLUSIVE_OR_EXPRESSION {extends=C_INCLUSIVE_OR_EXPRESSION}
private C_INCLUSIVE_OR_EXPRESSION_B ::= C_EXCLUSIVE_OR_EXPRESSION {extends=C_INCLUSIVE_OR_EXPRESSION}

C_LOGICAL_AND_EXPRESSION ::= C_LOGICAL_AND_EXPRESSION_A | C_LOGICAL_AND_EXPRESSION_B
private C_LOGICAL_AND_EXPRESSION_A ::= C_LOGICAL_AND_EXPRESSION C_AND_OP C_INCLUSIVE_OR_EXPRESSION {extends=C_LOGICAL_AND_EXPRESSION}
private C_LOGICAL_AND_EXPRESSION_B ::= C_INCLUSIVE_OR_EXPRESSION {extends=C_LOGICAL_AND_EXPRESSION}

C_LOGICAL_OR_EXPRESSION	::= C_LOGICAL_OR_EXPRESSION_A | C_LOGICAL_OR_EXPRESSION_B
private C_LOGICAL_OR_EXPRESSION_A ::= C_LOGICAL_OR_EXPRESSION C_OR_OP C_LOGICAL_AND_EXPRESSION {extends=C_LOGICAL_OR_EXPRESSION}
private C_LOGICAL_OR_EXPRESSION_B ::= C_LOGICAL_AND_EXPRESSION {extends=C_LOGICAL_OR_EXPRESSION}

C_CONDITIONAL_EXPRESSION ::= C_LOGICAL_OR_EXPRESSION
	| C_LOGICAL_OR_EXPRESSION C_QU_MARK C_EXPRESSION C_COLON C_CONDITIONAL_EXPRESSION

C_ASSIGNMENT_EXPRESSION	::= C_CONDITIONAL_EXPRESSION
	| C_UNARY_EXPRESSION C_ASSIGNMENT_OPERATOR C_ASSIGNMENT_EXPRESSION

C_ASSIGNMENT_OPERATOR ::= C_EQ_SIGN	| C_MUL_ASSIGN | C_DIV_ASSIGN | C_MOD_ASSIGN | C_ADD_ASSIGN
	| C_SUB_ASSIGN | C_LEFT_ASSIGN | C_RIGHT_ASSIGN | C_AND_ASSIGN | C_XOR_ASSIGN | C_OR_ASSIGN

C_EXPRESSION ::= C_EXPRESSION_A | C_EXPRESSION_B
private C_EXPRESSION_A ::= C_EXPRESSION C_COMMA C_ASSIGNMENT_EXPRESSION {extends=C_EXPRESSION}
private C_EXPRESSION_B ::= C_ASSIGNMENT_EXPRESSION {extends=C_EXPRESSION}

C_CONSTANT_EXPRESSION ::= C_CONDITIONAL_EXPRESSION	/* with constraints */

C_DECLARATION ::= C_DECLARATION_SPECIFIERS C_SEMICOLON
	| C_DECLARATION_SPECIFIERS C_INIT_DECLARATOR_LIST C_SEMICOLON
	| C_STATIC_ASSERT_DECLARATION

C_DECLARATION_SPECIFIERS ::= C_STORAGE_CLASS_SPECIFIER C_DECLARATION_SPECIFIERS
	| C_STORAGE_CLASS_SPECIFIER
	| C_TYPE_SPECIFIER C_DECLARATION_SPECIFIERS
	| C_TYPE_SPECIFIER
	| C_TYPE_QUALIFIER C_DECLARATION_SPECIFIERS
	| C_TYPE_QUALIFIER
	| C_FUNCTION_SPECIFIER C_DECLARATION_SPECIFIERS
	| C_FUNCTION_SPECIFIER
	| C_ALIGNMENT_SPECIFIER C_DECLARATION_SPECIFIERS
	| C_ALIGNMENT_SPECIFIER

C_INIT_DECLARATOR_LIST ::= C_INIT_DECLARATOR_LIST_A | C_INIT_DECLARATOR_LIST_B
private C_INIT_DECLARATOR_LIST_A ::= C_INIT_DECLARATOR_LIST C_COMMA C_INIT_DECLARATOR {extends=C_INIT_DECLARATOR_LIST}
private C_INIT_DECLARATOR_LIST_B ::= C_INIT_DECLARATOR {extends=C_INIT_DECLARATOR_LIST}

C_INIT_DECLARATOR ::= C_DECLARATOR C_EQ_SIGN C_INITIALIZER | C_DECLARATOR

C_STORAGE_CLASS_SPECIFIER ::= C_TYPEDEF	/* identifiers must be flagged as C_TYPEDEF_NAME */
	| C_EXTERN | C_STATIC | C_THREAD_LOCAL | C_AUTO	| C_REGISTER

C_TYPE_SPECIFIER ::= C_VOID	| C_CHAR | C_SHORT | C_INT | C_LONG	| C_FLOAT | C_DOUBLE
	| C_SIGNED | C_UNSIGNED | C_BOOL | C_COMPLEX | C_IMAGINARY | C_ATOMIC_TYPE_SPECIFIER
	| C_STRUCT_OR_UNION_SPECIFIER | C_ENUM_SPECIFIER | C_TYPEDEF_NAME

C_STRUCT_OR_UNION_SPECIFIER	::= C_STRUCT_OR_UNION C_L_CURLY C_STRUCT_DECLARATION_LIST C_R_CURLY
	| C_STRUCT_OR_UNION C_IDENTIFIER C_L_CURLY C_STRUCT_DECLARATION_LIST C_R_CURLY
	| C_STRUCT_OR_UNION C_IDENTIFIER

C_STRUCT_OR_UNION ::= C_STRUCT | C_UNION

C_STRUCT_DECLARATION_LIST ::= C_STRUCT_DECLARATION_LIST_A | C_STRUCT_DECLARATION_LIST_B
private C_STRUCT_DECLARATION_LIST_A ::= C_STRUCT_DECLARATION_LIST C_STRUCT_DECLARATION {extends=C_STRUCT_DECLARATION_LIST}
private C_STRUCT_DECLARATION_LIST_B ::= C_STRUCT_DECLARATION {extends=C_STRUCT_DECLARATION_LIST}

C_STRUCT_DECLARATION ::= C_SPECIFIER_QUALIFIER_LIST C_SEMICOLON	/* for anonymous struct/union */
	| C_SPECIFIER_QUALIFIER_LIST C_STRUCT_DECLARATOR_LIST C_SEMICOLON
	| C_STATIC_ASSERT_DECLARATION

C_SPECIFIER_QUALIFIER_LIST ::= C_TYPE_SPECIFIER C_SPECIFIER_QUALIFIER_LIST
	| C_TYPE_SPECIFIER
	| C_TYPE_QUALIFIER C_SPECIFIER_QUALIFIER_LIST
	| C_TYPE_QUALIFIER

C_STRUCT_DECLARATOR_LIST ::= C_STRUCT_DECLARATOR_LIST_A | C_STRUCT_DECLARATOR_LIST_B
private C_STRUCT_DECLARATOR_LIST_A ::= C_STRUCT_DECLARATOR_LIST C_COMMA C_STRUCT_DECLARATOR {extends=C_STRUCT_DECLARATOR_LIST}
private C_STRUCT_DECLARATOR_LIST_B ::= C_STRUCT_DECLARATOR {extends=C_STRUCT_DECLARATOR_LIST}

C_STRUCT_DECLARATOR	::= C_COLON C_CONSTANT_EXPRESSION
	| C_DECLARATOR C_COLON C_CONSTANT_EXPRESSION
	| C_DECLARATOR

C_ENUM_SPECIFIER ::= C_ENUM C_L_CURLY C_ENUMERATOR_LIST C_R_CURLY
	| C_ENUM C_L_CURLY C_ENUMERATOR_LIST C_COMMA C_R_CURLY
	| C_ENUM C_IDENTIFIER C_L_CURLY C_ENUMERATOR_LIST C_R_CURLY
	| C_ENUM C_IDENTIFIER C_L_CURLY C_ENUMERATOR_LIST C_COMMA C_R_CURLY
	| C_ENUM C_IDENTIFIER

C_ENUMERATOR_LIST ::= C_ENUMERATOR_LIST_A | C_ENUMERATOR_LIST_B
private C_ENUMERATOR_LIST_A ::= C_ENUMERATOR_LIST C_COMMA C_ENUMERATOR {extends=C_ENUMERATOR_LIST}
private C_ENUMERATOR_LIST_B ::= C_ENUMERATOR {extends=C_ENUMERATOR_LIST}

/* identifiers must be flagged as C_ENUMERATION_CONSTANT */
C_ENUMERATOR ::= C_ENUMERATION_CONSTANT C_EQ_SIGN C_CONSTANT_EXPRESSION	| C_ENUMERATION_CONSTANT

C_ATOMIC_TYPE_SPECIFIER	::= C_ATOMIC C_L_PAREN C_TYPE_NAME C_R_PAREN

C_TYPE_QUALIFIER ::= C_CONST | C_RESTRICT | C_VOLATILE | C_ATOMIC

C_FUNCTION_SPECIFIER ::= C_INLINE | C_NORETURN

C_ALIGNMENT_SPECIFIER ::= C_ALIGNAS C_L_PAREN C_TYPE_NAME C_R_PAREN
	| C_ALIGNAS C_L_PAREN C_CONSTANT_EXPRESSION C_R_PAREN

C_DECLARATOR ::= C_POINTER C_DIRECT_DECLARATOR | C_DIRECT_DECLARATOR

C_DIRECT_DECLARATOR	::= C_DIRECT_DECLARATOR_A | C_DIRECT_DECLARATOR_B | C_DIRECT_DECLARATOR_C
	| C_DIRECT_DECLARATOR_D | C_DIRECT_DECLARATOR_E	| C_DIRECT_DECLARATOR_F
	| C_DIRECT_DECLARATOR_G	| C_DIRECT_DECLARATOR_H	| C_DIRECT_DECLARATOR_I
	| C_DIRECT_DECLARATOR_J	| C_DIRECT_DECLARATOR_K	| C_DIRECT_DECLARATOR_L
	| C_DIRECT_DECLARATOR_M	| C_DIRECT_DECLARATOR_N
private C_DIRECT_DECLARATOR_A ::= C_DIRECT_DECLARATOR C_L_BRACKET C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_B ::= C_DIRECT_DECLARATOR C_L_BRACKET C_MULT C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_C ::= C_DIRECT_DECLARATOR C_L_BRACKET C_STATIC C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_D ::= C_DIRECT_DECLARATOR C_L_BRACKET C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_E ::= C_DIRECT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_MULT C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_F ::= C_DIRECT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_G ::= C_DIRECT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_H ::= C_DIRECT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_I ::= C_DIRECT_DECLARATOR C_L_BRACKET C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_J ::= C_DIRECT_DECLARATOR C_L_PAREN C_PARAMETER_TYPE_LIST C_R_PAREN {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_K ::= C_DIRECT_DECLARATOR C_L_PAREN C_R_PAREN {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_L ::= C_DIRECT_DECLARATOR C_L_PAREN C_IDENTIFIER_LIST C_R_PAREN {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_M ::= C_L_PAREN C_DECLARATOR C_R_PAREN {extends=C_DIRECT_DECLARATOR}
private C_DIRECT_DECLARATOR_N ::= C_IDENTIFIER {extends=C_DIRECT_DECLARATOR}

C_POINTER ::= C_MULT C_TYPE_QUALIFIER_LIST C_POINTER
	| C_MULT C_TYPE_QUALIFIER_LIST
	| C_MULT C_POINTER
	| C_MULT

C_TYPE_QUALIFIER_LIST ::= C_TYPE_QUALIFIER_LIST_A | C_TYPE_QUALIFIER_LIST_B
private C_TYPE_QUALIFIER_LIST_A ::= C_TYPE_QUALIFIER_LIST C_TYPE_QUALIFIER {extends=C_TYPE_QUALIFIER_LIST}
private C_TYPE_QUALIFIER_LIST_B ::= C_TYPE_QUALIFIER {extends=C_TYPE_QUALIFIER_LIST}

C_PARAMETER_TYPE_LIST ::= C_PARAMETER_LIST C_COMMA C_ELLIPSIS	| C_PARAMETER_LIST

C_PARAMETER_LIST ::= C_PARAMETER_LIST_A | C_PARAMETER_LIST_B
private C_PARAMETER_LIST_A ::= C_PARAMETER_LIST C_COMMA C_PARAMETER_DECLARATION {extends=C_PARAMETER_LIST}
private C_PARAMETER_LIST_B ::= C_PARAMETER_DECLARATION {extends=C_PARAMETER_LIST}

C_PARAMETER_DECLARATION	::= C_DECLARATION_SPECIFIERS C_DECLARATOR
	| C_DECLARATION_SPECIFIERS C_ABSTRACT_DECLARATOR
	| C_DECLARATION_SPECIFIERS

C_IDENTIFIER_LIST ::= C_IDENTIFIER_LIST_A | C_IDENTIFIER_LIST_B
private C_IDENTIFIER_LIST_A ::= C_IDENTIFIER_LIST C_COMMA C_IDENTIFIER {extends=C_IDENTIFIER_LIST}
private C_IDENTIFIER_LIST_B ::= C_IDENTIFIER {extends=C_IDENTIFIER_LIST}

C_TYPE_NAME	::= C_SPECIFIER_QUALIFIER_LIST C_ABSTRACT_DECLARATOR | C_SPECIFIER_QUALIFIER_LIST

C_ABSTRACT_DECLARATOR ::= C_POINTER C_DIRECT_ABSTRACT_DECLARATOR
	| C_POINTER	| C_DIRECT_ABSTRACT_DECLARATOR

C_DIRECT_ABSTRACT_DECLARATOR ::= C_DIRECT_ABSTRACT_DECLARATOR_A | C_DIRECT_ABSTRACT_DECLARATOR_B
    | C_DIRECT_ABSTRACT_DECLARATOR_C | C_DIRECT_ABSTRACT_DECLARATOR_D
    | C_DIRECT_ABSTRACT_DECLARATOR_E | C_DIRECT_ABSTRACT_DECLARATOR_F
    | C_DIRECT_ABSTRACT_DECLARATOR_G | C_DIRECT_ABSTRACT_DECLARATOR_H
    | C_DIRECT_ABSTRACT_DECLARATOR_I | C_DIRECT_ABSTRACT_DECLARATOR_J
    | C_DIRECT_ABSTRACT_DECLARATOR_K | C_DIRECT_ABSTRACT_DECLARATOR_L
    | C_DIRECT_ABSTRACT_DECLARATOR_M | C_DIRECT_ABSTRACT_DECLARATOR_N
    | C_DIRECT_ABSTRACT_DECLARATOR_O | C_DIRECT_ABSTRACT_DECLARATOR_P
    | C_DIRECT_ABSTRACT_DECLARATOR_Q | C_DIRECT_ABSTRACT_DECLARATOR_R
    | C_DIRECT_ABSTRACT_DECLARATOR_S | C_DIRECT_ABSTRACT_DECLARATOR_T
    | C_DIRECT_ABSTRACT_DECLARATOR_U
private C_DIRECT_ABSTRACT_DECLARATOR_A ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_B ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_MULT C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_C ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_STATIC C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_D ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_E ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_F ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_G ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_TYPE_QUALIFIER_LIST C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_H ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_BRACKET C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_I ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_PAREN C_R_PAREN {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_J ::= C_DIRECT_ABSTRACT_DECLARATOR C_L_PAREN C_PARAMETER_TYPE_LIST C_R_PAREN {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_K ::= C_L_PAREN C_ABSTRACT_DECLARATOR C_R_PAREN {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_L ::= C_L_BRACKET C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_M ::= C_L_BRACKET C_MULT C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_N ::= C_L_BRACKET C_STATIC C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_O ::= C_L_BRACKET C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_P ::= C_L_BRACKET C_TYPE_QUALIFIER_LIST C_STATIC C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_Q ::= C_L_BRACKET C_TYPE_QUALIFIER_LIST C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_R ::= C_L_BRACKET C_TYPE_QUALIFIER_LIST C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_S ::= C_L_BRACKET C_ASSIGNMENT_EXPRESSION C_R_BRACKET {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_T ::= C_L_PAREN C_R_PAREN {extends=C_DIRECT_ABSTRACT_DECLARATOR}
private C_DIRECT_ABSTRACT_DECLARATOR_U ::= C_L_PAREN C_PARAMETER_TYPE_LIST C_R_PAREN {extends=C_DIRECT_ABSTRACT_DECLARATOR}


C_INITIALIZER ::= C_L_CURLY C_INITIALIZER_LIST C_R_CURLY
	| C_L_CURLY C_INITIALIZER_LIST C_COMMA C_R_CURLY
	| C_ASSIGNMENT_EXPRESSION

C_INITIALIZER_LIST ::= C_INITIALIZER_LIST_A | C_INITIALIZER_LIST_B | C_INITIALIZER_LIST_C | C_INITIALIZER_LIST_D
private C_INITIALIZER_LIST_A ::= C_INITIALIZER_LIST C_COMMA C_DESIGNATION C_INITIALIZER {extends=C_INITIALIZER_LIST}
private C_INITIALIZER_LIST_B ::= C_INITIALIZER_LIST C_COMMA C_INITIALIZER {extends=C_INITIALIZER_LIST}
private C_INITIALIZER_LIST_C ::= C_DESIGNATION C_INITIALIZER {extends=C_INITIALIZER_LIST}
private C_INITIALIZER_LIST_D ::= C_INITIALIZER {extends=C_INITIALIZER_LIST}

C_DESIGNATION ::= C_DESIGNATOR_LIST C_EQ_SIGN

C_DESIGNATOR_LIST ::= C_DESIGNATOR_LIST_A | C_DESIGNATOR_LIST_B
C_DESIGNATOR_LIST_A ::= C_DESIGNATOR_LIST C_DESIGNATOR {extends=C_DESIGNATOR_LIST}
C_DESIGNATOR_LIST_B ::= C_DESIGNATOR {extends=C_DESIGNATOR_LIST}

C_DESIGNATOR ::= C_L_BRACKET C_CONSTANT_EXPRESSION C_R_BRACKET | C_DOT C_IDENTIFIER

C_STATIC_ASSERT_DECLARATION	::= C_STATIC_ASSERT C_L_PAREN C_CONSTANT_EXPRESSION C_COMMA C_STRING_LITERAL C_R_PAREN C_SEMICOLON

C_STATEMENT	::= C_LABELED_STATEMENT
	| C_COMPOUND_STATEMENT
	| C_EXPRESSION_STATEMENT
	| C_SELECTION_STATEMENT
	| C_ITERATION_STATEMENT
	| C_JUMP_STATEMENT

C_LABELED_STATEMENT	::= C_IDENTIFIER C_COLON C_STATEMENT
	| C_CASE C_CONSTANT_EXPRESSION C_COLON C_STATEMENT
	| C_DEFAULT C_COLON C_STATEMENT

C_COMPOUND_STATEMENT ::= C_L_CURLY C_R_CURLY
	| C_L_CURLY  C_BLOCK_ITEM_LIST C_R_CURLY

C_BLOCK_ITEM_LIST ::= C_BLOCK_ITEM_LIST_A | C_BLOCK_ITEM_LIST_B
private C_BLOCK_ITEM_LIST_A ::= C_BLOCK_ITEM_LIST C_BLOCK_ITEM {extends=C_BLOCK_ITEM_LIST}
private C_BLOCK_ITEM_LIST_B ::= C_BLOCK_ITEM {extends=C_BLOCK_ITEM_LIST}

C_BLOCK_ITEM ::= C_DECLARATION | C_STATEMENT

C_EXPRESSION_STATEMENT ::= C_SEMICOLON | C_EXPRESSION C_SEMICOLON

C_SELECTION_STATEMENT ::= C_IF C_L_PAREN C_EXPRESSION C_R_PAREN C_STATEMENT C_ELSE C_STATEMENT
	| C_IF C_L_PAREN C_EXPRESSION C_R_PAREN C_STATEMENT
	| C_SWITCH C_L_PAREN C_EXPRESSION C_R_PAREN C_STATEMENT

C_ITERATION_STATEMENT ::= C_WHILE C_L_PAREN C_EXPRESSION C_R_PAREN C_STATEMENT
	| C_DO C_STATEMENT C_WHILE C_L_PAREN C_EXPRESSION C_R_PAREN C_SEMICOLON
	| C_FOR C_L_PAREN C_EXPRESSION_STATEMENT C_EXPRESSION_STATEMENT C_R_PAREN C_STATEMENT
	| C_FOR C_L_PAREN C_EXPRESSION_STATEMENT C_EXPRESSION_STATEMENT C_EXPRESSION C_R_PAREN C_STATEMENT
	| C_FOR C_L_PAREN C_DECLARATION C_EXPRESSION_STATEMENT C_R_PAREN C_STATEMENT
	| C_FOR C_L_PAREN C_DECLARATION C_EXPRESSION_STATEMENT C_EXPRESSION C_R_PAREN C_STATEMENT

C_JUMP_STATEMENT ::= C_GOTO C_IDENTIFIER C_SEMICOLON
	| C_CONTINUE C_SEMICOLON
	| C_BREAK C_SEMICOLON
	| C_RETURN C_SEMICOLON
	| C_RETURN C_EXPRESSION C_SEMICOLON

C_END ::= C_END_A | C_END_B
private C_END_A ::= C_END C_EXTERNAL_DECLARATION {extends=C_END}
private C_END_B ::= C_EXTERNAL_DECLARATION {extends=C_END}

C_EXTERNAL_DECLARATION ::= C_FUNCTION_DEFINITION | C_DECLARATION

C_FUNCTION_DEFINITION ::= C_DECLARATION_SPECIFIERS C_DECLARATOR C_DECLARATION_LIST C_COMPOUND_STATEMENT
	| C_DECLARATION_SPECIFIERS C_DECLARATOR C_COMPOUND_STATEMENT

C_DECLARATION_LIST ::= C_DECLARATION_LIST_A | C_DECLARATION_LIST_B
private C_DECLARATION_LIST_A ::= C_DECLARATION_LIST C_DECLARATION {extends=C_DECLARATION_LIST}
private C_DECLARATION_LIST_B ::= C_DECLARATION {extends=C_DECLARATION_LIST}




