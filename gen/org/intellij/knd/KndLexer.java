/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.knd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.knd.psi.KndTypes;
import com.intellij.psi.TokenType;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Knd.flex</tt>
 */
class KndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int D_WAITING_PLATFORM = 2;
  public static final int D_WAITING_VALUE = 4;
  public static final int C_END = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 13296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\0\1\24\3\0\1\24\71\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\20\1\33\1\34\2\0\1\35\11\0\1\36\21\0\1\35\1\37\23\0"+
    "\1\27\1\40\3\0\1\24\1\41\1\40\4\0\1\42\1\40\4\0\1\36\1\43\1\27\3\0\2\44\1"+
    "\27\1\30\1\45\1\0\1\44\11\0\1\25\14\0\1\46\1\36\1\0\1\47\1\0\1\50\1\27\1\42"+
    "\7\0\1\51\14\0\1\26\1\27\6\0\1\52\1\23\5\0\1\52\2\27\3\0\1\2\10\27\1\47\1"+
    "\30\6\27\1\53\2\0\1\24\14\0\1\54\1\0\2\40\1\55\1\50\1\56\2\0\1\47\1\57\1\60"+
    "\1\50\1\61\1\42\1\62\1\54\1\0\1\2\1\45\1\55\1\63\1\56\2\0\1\47\1\64\1\65\1"+
    "\63\1\66\1\41\1\67\1\70\1\0\1\52\1\27\1\55\1\36\1\35\2\0\1\47\1\71\1\60\1"+
    "\36\1\72\1\73\1\27\1\54\1\0\1\41\1\27\1\55\1\50\1\56\2\0\1\47\1\71\1\60\1"+
    "\50\1\66\1\70\1\62\1\54\1\0\1\41\1\27\1\74\1\75\1\76\1\77\1\100\1\75\1\0\1"+
    "\25\1\75\1\76\1\101\1\27\1\70\1\0\1\27\1\41\1\55\1\32\1\47\2\0\1\47\1\46\1"+
    "\102\1\32\1\76\1\103\1\26\1\54\1\0\2\27\1\74\1\32\1\47\2\0\1\47\1\46\1\60"+
    "\1\32\1\76\1\103\1\33\1\54\1\0\1\104\1\27\1\74\1\32\1\47\4\0\1\51\1\32\1\105"+
    "\1\42\1\27\1\54\1\0\1\27\1\37\1\74\1\0\1\24\1\37\2\0\1\35\1\106\1\24\1\107"+
    "\1\110\1\0\2\27\1\111\1\27\1\40\6\0\1\63\1\0\1\24\1\0\1\26\4\27\1\112\1\113"+
    "\1\53\1\40\1\114\1\74\1\0\1\72\1\110\1\52\1\0\1\60\4\27\1\73\2\27\1\26\1\0"+
    "\1\26\1\115\1\116\1\0\1\40\3\0\1\30\1\40\1\0\1\32\2\0\1\40\3\0\1\30\1\33\7"+
    "\27\11\0\1\26\11\0\1\52\4\0\1\36\1\22\5\0\1\117\51\0\1\76\1\24\1\76\5\0\1"+
    "\76\4\0\1\76\1\24\1\76\1\0\1\24\7\0\1\76\10\0\1\51\4\27\2\0\2\27\12\0\1\30"+
    "\1\27\1\40\114\0\1\50\2\0\1\40\2\0\1\44\11\0\1\75\1\73\1\27\1\0\1\32\1\30"+
    "\1\27\2\0\1\30\1\27\2\0\1\2\1\27\1\0\1\32\1\120\1\27\12\0\1\121\1\122\1\0"+
    "\1\26\3\27\1\122\1\0\1\26\13\0\1\27\5\0\1\44\10\0\1\52\1\27\3\0\1\30\1\0\1"+
    "\2\1\0\1\2\1\70\4\0\1\52\1\30\1\27\5\0\1\2\3\0\1\26\1\0\1\26\4\27\3\0\1\2"+
    "\7\0\1\24\3\0\1\50\1\0\1\26\1\0\1\26\1\42\13\27\11\0\1\2\1\0\1\26\1\27\1\123"+
    "\1\2\1\27\16\0\1\2\1\27\7\0\1\27\1\0\1\102\5\0\1\52\12\27\1\117\3\0\1\24\1"+
    "\27\34\0\1\24\2\27\1\53\42\0\2\52\4\0\2\52\1\0\1\124\3\0\1\52\6\0\1\32\1\110"+
    "\1\125\1\30\1\54\1\2\1\0\1\30\1\125\1\30\1\27\1\123\3\27\1\126\1\27\1\42\1"+
    "\73\1\27\1\127\1\27\1\30\1\37\1\41\1\42\2\27\1\0\1\30\3\0\1\44\2\27\1\0\1"+
    "\30\1\130\1\0\1\73\1\27\1\107\1\37\1\106\1\131\1\31\1\132\1\0\1\60\1\133\1"+
    "\134\2\27\5\0\1\73\116\27\5\0\1\24\5\0\1\24\20\0\1\30\1\123\1\2\1\27\4\0\1"+
    "\36\1\22\7\0\1\42\1\27\1\42\2\0\1\24\1\27\10\24\4\0\5\27\1\42\72\27\1\133"+
    "\3\27\1\40\1\0\1\131\1\30\1\40\11\0\1\24\1\135\1\40\12\0\1\117\1\133\4\0\1"+
    "\52\1\40\12\0\1\24\2\27\3\0\1\44\6\27\170\0\1\52\11\27\71\0\1\30\6\27\21\0"+
    "\1\30\10\27\5\0\1\52\41\0\1\30\3\0\1\2\2\27\6\0\1\53\1\36\3\0\1\42\12\0\1"+
    "\26\3\27\1\42\1\0\1\37\14\0\1\61\1\2\1\27\1\0\1\44\11\27\6\0\2\27\1\73\6\0"+
    "\1\2\1\27\10\0\1\30\1\27\1\0\1\26\3\0\1\45\5\0\1\52\4\0\1\2\1\27\3\0\1\30"+
    "\10\0\1\73\1\42\1\0\1\26\4\27\6\0\1\24\1\27\1\0\1\52\1\0\1\26\2\0\1\24\1\111"+
    "\10\0\1\44\2\27\1\122\2\0\1\136\1\27\3\137\1\27\2\24\22\27\5\0\1\140\1\0\1"+
    "\26\64\0\1\2\1\27\2\0\1\24\1\123\5\0\1\2\40\27\55\0\1\52\15\0\1\26\4\27\1"+
    "\24\1\27\1\123\1\133\1\0\1\47\1\24\1\110\1\141\15\0\1\26\3\27\1\123\54\0\1"+
    "\52\2\27\10\0\1\37\6\0\5\27\1\0\1\30\2\0\2\27\1\24\1\27\1\100\2\27\1\133\3"+
    "\27\1\41\1\32\20\0\1\50\1\127\1\27\1\0\1\26\1\40\2\0\1\63\1\40\2\0\1\44\1"+
    "\70\12\0\1\24\3\37\1\142\1\143\2\27\1\144\1\0\1\46\2\0\1\24\2\0\1\145\1\0"+
    "\1\52\1\0\1\52\4\27\17\0\1\44\10\27\6\0\1\30\20\27\1\22\20\27\3\0\1\30\6\0"+
    "\1\73\5\27\3\0\1\24\2\27\3\0\1\44\6\27\3\0\1\52\4\0\1\2\1\0\1\131\5\27\23"+
    "\0\1\52\1\0\1\26\52\27\1\52\1\47\4\0\1\36\1\146\2\0\1\52\25\27\2\0\1\52\1"+
    "\27\3\0\1\26\10\27\7\0\1\70\10\27\1\147\1\53\1\46\1\40\2\0\1\2\1\63\4\27\3"+
    "\0\1\30\20\27\6\0\1\52\1\27\2\0\1\52\1\27\2\0\1\44\21\27\11\0\1\73\66\27\10"+
    "\0\1\24\3\27\1\70\1\0\2\27\7\0\1\150\2\27\3\0\1\73\1\0\1\26\6\0\1\32\1\0\10"+
    "\27\10\0\1\30\1\27\1\0\1\26\24\27\7\0\1\27\1\0\1\26\46\27\55\0\1\24\22\27"+
    "\14\0\1\44\63\27\5\0\1\24\72\27\7\0\1\73\130\27\10\0\1\30\1\27\5\0\1\24\1"+
    "\27\1\42\2\0\14\27\1\26\153\27\1\133\1\102\2\0\1\51\1\2\3\27\1\20\22\27\1"+
    "\142\67\27\12\0\1\32\10\0\1\32\1\151\1\152\1\0\1\153\1\46\7\0\1\36\1\51\2"+
    "\32\3\0\1\154\1\110\1\37\1\47\51\0\1\52\3\0\1\47\2\0\1\117\3\0\1\117\2\0\1"+
    "\32\3\0\1\32\2\0\1\24\3\0\1\24\3\0\1\47\3\0\1\47\2\0\1\117\1\54\6\0\1\46\3"+
    "\0\1\112\1\40\1\117\1\155\1\107\1\156\1\112\1\124\1\112\2\117\1\67\1\0\1\35"+
    "\1\0\1\2\1\55\1\35\1\0\1\2\50\27\32\0\1\24\5\27\106\0\1\30\1\27\33\0\1\52"+
    "\74\27\1\41\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 888 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\10\1\4\1\2\1\1\1\5\1\3\6\10\4\0\1\14\1\16\1\103\1\15\1\10\1\107\1\110"+
    "\1\102\1\117\1\120\1\20\1\30\1\116\1\45\1\7\1\17\1\21\7\23\1\40\1\22\1\6\1"+
    "\113\1\106\1\105\1\104\1\41\1\0\1\75\1\25\1\71\1\61\1\27\1\33\1\76\1\24\1"+
    "\77\2\24\1\35\1\62\1\100\1\55\1\31\2\24\1\67\1\101\1\37\2\24\1\26\2\24\1\121"+
    "\1\13\1\122\1\111\1\74\1\0\1\64\1\43\1\46\1\60\1\53\1\32\1\70\1\63\1\52\1"+
    "\24\1\66\1\34\1\50\1\42\1\47\1\51\1\24\1\54\1\57\1\56\1\36\1\12\1\73\1\44"+
    "\1\65\1\72\1\114\1\112\1\115\1\123\6\10\1\11\2\10\2\0\4\10\4\0\1\10\2\0\1"+
    "\10\7\0\1\10\4\0\1\10\5\0\7\10\1\0\2\10\4\0\4\10\16\0\5\10\7\0\1\10\1\0\1"+
    "\10\1\0\5\10\1\0\2\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\4\10\1\0\13\10\1\0\1"+
    "\10\2\0\6\10\1\0\7\10\1\0\1\10\15\0\1\10\1\0\2\10\1\0\2\10\1\0\4\10\10\0\1"+
    "\10\4\0\4\10\1\0\4\10\1\0\13\10\2\0\4\10\2\0\11\10\6\0\10\10\2\0\2\10\1\0"+
    "\3\10\1\0\4\10\2\0\6\10\1\0\1\10\3\0\4\10\2\0\5\10\2\0\4\10\5\0\2\10\1\0\4"+
    "\10\4\0\2\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0\1\10\1\0\3\10\2\0\3\10\3\0\4\10"+
    "\1\0\1\10\7\0\3\10\1\0\2\10\1\0\5\10\1\0\3\10\2\0\1\10\11\0\2\10\1\0\6\10"+
    "\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\1\10\6\0\3\10\3"+
    "\0\3\10\5\0\2\10\2\0\2\10\5\0\1\10\1\0\5\10\1\0\4\10\1\0\1\10\4\0\1\10\4\0"+
    "\6\10\1\0\1\10\3\0\2\10\5\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\3\0\3"+
    "\10\1\0\1\10\1\0\1\10\5\0\1\10\1\0\1\10\1\0\1\10\4\0\5\10\1\0\5\10\1\0\2\10"+
    "\4\0\4\10\3\0\1\10\3\0\3\10\5\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\2"+
    "\0\3\10\1\0\2\10\2\1\5\10\5\0\1\10\4\0\1\10\3\0\3\10\1\0\5\10\2\0\1\10\1\0"+
    "\4\10\1\0\1\10\5\0\5\10\4\0\1\10\2\0\2\10\2\0\3\10\2\0\5\10\2\0\6\10\1\0\3"+
    "\10\1\0\2\10\2\0\2\10\1\0\2\10\1\0\2\10\2\0\3\10\3\0\2\10\3\0\2\10\2\0\3\10"+
    "\4\0\3\10\1\0\2\10\1\0\2\10\3\0\1\10\2\0\5\10\1\0\2\10\1\0\3\10\2\0\1\10\4"+
    "\0\1\10\2\0\2\10\2\0\4\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0\4\10\2\0\1\10\1\0"+
    "\1\10\5\0\1\10\1\0\1\10\1\0\3\10");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\2\1\3\11\1\1\3"+
    "\1\2\1\4\1\5\2\6\1\2\2\7\1\2\1\3"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\4\16\1\20\1\16\1\21\13\16\2\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\0"+
    "\2\42\10\1\1\43\1\0\1\7\1\0\1\44\1\2"+
    "\1\16\1\45\1\0\1\46\1\47\1\15\3\0\3\15"+
    "\1\50\1\51\3\16\2\0\3\16\1\52\1\53\1\54"+
    "\3\16\1\55\12\16\1\56\15\16\3\0\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\4\1\1\73\6\1\1\74\1\44\2\16"+
    "\2\0\1\15\1\44\1\0\4\15\1\16\1\75\10\16"+
    "\1\76\34\16\4\0\1\77\1\100\12\1\1\16\1\101"+
    "\1\42\1\0\1\16\1\102\5\16\1\103\1\104\1\16"+
    "\1\105\1\106\15\16\1\107\1\110\13\16\12\1\1\16"+
    "\1\111\1\112\1\16\1\113\1\16\1\114\12\16\1\115"+
    "\3\16\1\116\1\117\11\16\10\1\3\16\1\120\1\121"+
    "\1\122\3\16\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\12\16\3\1\1\131\4\1\5\16\1\132\1\133\5\16"+
    "\1\134\4\16\10\1\1\135\1\136\1\137\1\140\1\141"+
    "\1\16\1\142\1\143\1\144\1\145\1\146\3\16\10\1"+
    "\2\16\1\147\1\16\6\1\1\16\1\150\1\16\5\1"+
    "\2\16\4\1\2\16\4\1\1\16\1\151\3\1\1\152"+
    "\12\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498\0\u04ec"+
    "\0\u0540\0\u0594\0\u05e8\0\u063c\0\u01f8\0\u01f8\0\u0690\0\u06e4"+
    "\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24"+
    "\0\u0c78\0\u0ccc\0\u0d20\0\u01f8\0\u0d74\0\u0dc8\0\u0e1c\0\u0e70"+
    "\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110"+
    "\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c\0\u13b0"+
    "\0\u1404\0\u1458\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u02a0\0\u14ac\0\u1500\0\u1554\0\u15a8"+
    "\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u05e8\0\u0888"+
    "\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944\0\u01f8\0\u1998\0\u01f8"+
    "\0\u01f8\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4"+
    "\0\u01f8\0\u01f8\0\u1c38\0\u1c8c\0\u1ce0\0\u11b8\0\u120c\0\u1d34"+
    "\0\u1d88\0\u1ddc\0\u01f8\0\u01f8\0\u01f8\0\u1e30\0\u1e84\0\u1ed8"+
    "\0\u0b7c\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124"+
    "\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4"+
    "\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664"+
    "\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u28b0\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u0150\0\u2a54\0\u2aa8\0\u2afc"+
    "\0\u2b50\0\u2ba4\0\u2bf8\0\u01f8\0\u01f8\0\u2c4c\0\u2ca0\0\u2cf4"+
    "\0\u2d48\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u01f8\0\u2eec\0\u2f40"+
    "\0\u2f94\0\u0b7c\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c"+
    "\0\u31e0\0\u3234\0\u0b7c\0\u3288\0\u32dc\0\u3330\0\u3384\0\u33d8"+
    "\0\u342c\0\u3480\0\u34d4\0\u3528\0\u357c\0\u35d0\0\u3624\0\u3678"+
    "\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918"+
    "\0\u396c\0\u39c0\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\u3bb8"+
    "\0\u3c0c\0\u3c60\0\u3cb4\0\u01f8\0\u01f8\0\u3d08\0\u3d5c\0\u3db0"+
    "\0\u3e04\0\u3e58\0\u3eac\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050"+
    "\0\u0b7c\0\u01f8\0\u40a4\0\u40f8\0\u0b7c\0\u414c\0\u41a0\0\u41f4"+
    "\0\u4248\0\u429c\0\u0b7c\0\u0b7c\0\u42f0\0\u0b7c\0\u0b7c\0\u4344"+
    "\0\u4398\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u0b7c\0\u0b7c\0\u4788\0\u47dc"+
    "\0\u4830\0\u4884\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c"+
    "\0\u4ad0\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c"+
    "\0\u4d70\0\u4dc4\0\u4e18\0\u4e6c\0\u0b7c\0\u0b7c\0\u4ec0\0\u0b7c"+
    "\0\u4f14\0\u0b7c\0\u4f68\0\u4fbc\0\u5010\0\u5064\0\u50b8\0\u510c"+
    "\0\u5160\0\u51b4\0\u5208\0\u525c\0\u0b7c\0\u52b0\0\u5304\0\u5358"+
    "\0\u0b7c\0\u0b7c\0\u53ac\0\u5400\0\u5454\0\u54a8\0\u54fc\0\u5550"+
    "\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748\0\u579c\0\u57f0"+
    "\0\u5844\0\u5898\0\u58ec\0\u5940\0\u5994\0\u59e8\0\u0b7c\0\u0b7c"+
    "\0\u0b7c\0\u5a3c\0\u5a90\0\u5ae4\0\u0b7c\0\u0b7c\0\u0b7c\0\u0b7c"+
    "\0\u0b7c\0\u0b7c\0\u5b38\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc"+
    "\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c\0\u5e80\0\u5ed4\0\u5f28\0\u0150"+
    "\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc\0\u6120\0\u6174\0\u61c8"+
    "\0\u621c\0\u0b7c\0\u0b7c\0\u6270\0\u62c4\0\u6318\0\u636c\0\u63c0"+
    "\0\u0b7c\0\u6414\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c"+
    "\0\u6660\0\u66b4\0\u6708\0\u675c\0\u67b0\0\u0b7c\0\u0b7c\0\u0b7c"+
    "\0\u0b7c\0\u0b7c\0\u6804\0\u0b7c\0\u0b7c\0\u0b7c\0\u0b7c\0\u0b7c"+
    "\0\u6858\0\u68ac\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50\0\u6aa4"+
    "\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4\0\u6c48\0\u0b7c\0\u6c9c\0\u6cf0"+
    "\0\u6d44\0\u6d98\0\u6dec\0\u6e40\0\u6e94\0\u6ee8\0\u0b7c\0\u6f3c"+
    "\0\u6f90\0\u6fe4\0\u7038\0\u708c\0\u70e0\0\u7134\0\u7188\0\u71dc"+
    "\0\u7230\0\u7284\0\u72d8\0\u732c\0\u7380\0\u73d4\0\u7428\0\u747c"+
    "\0\u74d0\0\u7524\0\u0b7c\0\u7578\0\u75cc\0\u7620\0\u0b7c\0\u7674"+
    "\0\u76c8\0\u771c\0\u7770\0\u77c4\0\u7818\0\u786c\0\u78c0\0\u7914"+
    "\0\u7968";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\5\2\6\2\7\2\5\1\10\1\11"+
    "\1\6\2\12\15\5\1\13\5\5\1\14\2\5\1\15"+
    "\1\16\2\5\1\17\1\5\1\20\3\5\1\21\3\5"+
    "\1\22\21\5\1\7\16\5\1\7\1\23\1\24\1\23"+
    "\1\6\1\24\1\25\1\26\1\27\1\30\1\31\1\7"+
    "\1\6\4\7\7\27\1\7\10\27\1\7\3\27\1\7"+
    "\34\27\3\7\1\25\16\7\1\32\1\33\1\24\1\33"+
    "\1\34\1\24\3\32\1\33\1\34\1\35\1\6\107\32"+
    "\2\7\1\6\1\7\2\6\1\36\1\37\2\7\1\40"+
    "\1\7\1\6\1\7\1\41\1\42\1\43\1\44\2\45"+
    "\4\46\1\47\1\46\1\50\1\46\1\51\1\52\1\53"+
    "\1\52\1\45\1\54\1\46\1\55\1\46\1\56\1\57"+
    "\3\46\1\60\1\61\1\62\1\46\1\63\1\64\1\65"+
    "\3\46\1\66\3\46\1\67\2\46\1\70\1\71\5\46"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\2\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\70\5\1\0\16\5\2\0\1\6\1\0\2\6"+
    "\4\0\1\6\1\0\1\6\233\0\2\5\1\6\1\5"+
    "\2\6\2\0\2\5\1\10\1\114\1\6\70\5\1\0"+
    "\16\5\14\0\1\5\107\0\2\12\1\0\1\5\4\115"+
    "\3\12\1\116\1\115\70\12\1\115\16\12\2\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\35\5\1\117\32\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\32\5\1\120\35\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\30\5\1\121\37\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\32\5\1\122"+
    "\35\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\47\5\1\123\20\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\27\5\1\124\40\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\41\5"+
    "\1\125\26\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\36\5\1\126\31\5\1\0\16\5\1\0"+
    "\5\127\3\0\2\127\1\0\1\127\110\0\1\127\1\24"+
    "\1\127\2\24\3\0\1\127\1\24\1\0\1\24\117\0"+
    "\3\27\6\0\7\27\1\0\10\27\1\0\3\27\1\0"+
    "\34\27\23\0\5\127\2\0\1\27\2\30\1\0\1\127"+
    "\4\0\7\27\1\0\10\27\1\0\3\27\1\0\34\27"+
    "\24\0\1\6\1\0\2\6\2\0\2\27\1\31\1\0"+
    "\1\6\4\0\7\27\1\0\10\27\1\0\3\27\1\0"+
    "\34\27\22\0\2\32\1\0\2\32\1\0\5\32\1\130"+
    "\111\32\1\33\1\127\2\33\1\127\3\32\2\33\1\130"+
    "\1\33\111\32\1\6\1\32\1\34\1\6\4\32\1\34"+
    "\1\130\1\34\112\32\1\131\120\32\104\0\1\112\26\0"+
    "\1\132\11\0\3\133\14\0\1\133\65\0\1\6\1\0"+
    "\2\6\4\0\1\134\1\0\1\6\4\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\1\46\1\135\32\46\127\0"+
    "\1\136\35\0\1\115\1\137\64\0\1\140\123\0\1\141"+
    "\25\0\1\133\11\0\1\142\1\143\1\142\2\0\1\144"+
    "\1\145\4\0\1\146\1\147\2\150\1\143\3\0\1\144"+
    "\6\0\1\145\57\0\1\133\11\0\3\45\3\0\1\145"+
    "\4\0\1\146\1\147\2\150\1\45\12\0\1\145\62\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\34\46\52\0\1\151\54\0\1\152\30\0\1\46\6\0"+
    "\7\46\1\0\3\46\1\153\4\46\1\0\3\46\1\0"+
    "\1\46\1\154\32\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\1\46\1\155\32\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\34\46\1\156\1\157\32\0\1\46\6\0\7\46\1\0"+
    "\7\46\1\160\1\0\1\161\2\46\1\0\34\46\1\156"+
    "\1\157\32\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\6\46\1\162\25\46\67\0\1\163\36\0"+
    "\1\164\1\165\30\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\46\1\166\13\46\1\167\1\170"+
    "\15\46\34\0\1\46\6\0\7\46\1\0\1\46\1\171"+
    "\6\46\1\0\1\172\2\46\1\0\34\46\34\0\1\46"+
    "\6\0\7\46\1\0\3\46\1\173\4\46\1\0\1\174"+
    "\1\46\1\175\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\176\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\17\46\1\177\14\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\4\46\1\200\3\46"+
    "\1\201\4\46\1\202\7\46\1\203\6\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\1\46"+
    "\1\204\3\46\1\205\26\46\34\0\1\46\6\0\7\46"+
    "\1\0\5\46\1\206\2\46\1\0\3\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\1\46\1\207\32\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\15\46\1\210\16\46"+
    "\34\0\1\46\6\0\4\46\1\211\2\46\1\0\10\46"+
    "\1\0\3\46\1\0\21\46\1\212\1\46\1\213\2\46"+
    "\1\214\1\215\1\216\1\217\1\220\1\221\22\0\2\222"+
    "\1\0\10\222\1\223\66\222\1\0\21\222\2\157\1\0"+
    "\10\157\1\224\67\157\1\225\20\157\104\0\1\226\1\227"+
    "\123\0\1\230\24\0\1\111\76\0\1\231\1\232\1\104"+
    "\120\0\1\105\1\233\123\0\1\234\2\0\1\235\120\0"+
    "\1\236\123\0\1\237\4\0\1\240\11\0\2\115\2\0"+
    "\122\115\2\0\10\115\1\12\107\115\2\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\25\5\1\241\1\242\41\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\25\5\1\243\24\5\1\244\15\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\30\5\1\245\37\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\33\5\1\246\34\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\31\5\1\247\36\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\31\5\1\250"+
    "\36\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\37\5\1\251\7\5\1\252\20\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\47\5\1\253"+
    "\20\5\1\0\16\5\5\32\1\0\5\32\1\130\110\32"+
    "\7\0\1\254\135\0\3\133\3\0\1\145\2\0\4\255"+
    "\2\0\1\133\12\0\1\145\52\0\1\6\1\0\2\6"+
    "\4\0\1\134\1\0\1\6\4\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\3\46\1\256\4\46\1\0\3\46\1\0\4\46"+
    "\1\257\27\46\22\0\20\137\1\260\103\137\7\0\1\133"+
    "\11\0\1\142\1\143\1\142\3\0\1\145\4\0\1\146"+
    "\1\147\2\150\1\143\12\0\1\145\57\0\1\133\11\0"+
    "\3\143\3\0\1\145\10\0\1\143\12\0\1\145\57\0"+
    "\1\261\11\0\3\262\1\0\1\262\1\0\1\262\2\0"+
    "\2\262\4\0\1\262\2\0\1\262\2\0\1\262\4\0"+
    "\1\262\4\0\2\262\2\0\1\262\4\0\1\262\3\0"+
    "\1\262\47\0\3\263\4\0\1\264\7\0\1\263\4\0"+
    "\1\264\112\0\1\265\1\0\2\266\121\0\1\265\2\266"+
    "\120\0\1\267\1\270\100\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\1\46\1\271\32\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\6\46\1\272\25\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\1\273\2\46\1\0\34\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\34\46"+
    "\1\0\1\157\32\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\4\46\1\274\4\46\1\275\22\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\5\46\1\276\26\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\1\277\2\46\1\0\34\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\16\46\1\300\15\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\11\46\1\301\22\46\34\0"+
    "\1\46\6\0\7\46\1\0\3\46\1\302\4\46\1\0"+
    "\3\46\1\0\10\46\1\303\23\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\11\46\1\304"+
    "\22\46\34\0\1\46\6\0\7\46\1\0\5\46\1\305"+
    "\2\46\1\0\3\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\10\46\1\306"+
    "\23\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\10\46\1\307\1\310\10\46\1\311\11\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\3\46\1\312\30\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\22\46\1\313\1\46"+
    "\1\314\7\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\6\46\1\315\7\46\1\316\15\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\1\46\1\317\32\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\4\46\1\320\27\46"+
    "\34\0\1\46\6\0\7\46\1\0\5\46\1\321\2\46"+
    "\1\0\3\46\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\1\46\1\322\6\46\1\0\3\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\10\46\1\323\23\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\10\46\1\324\23\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\4\46\1\325\27\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\1\46\1\326\32\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\10\46\1\327\23\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\1\46\1\330\32\46"+
    "\34\0\1\46\6\0\7\46\1\0\1\46\1\331\6\46"+
    "\1\0\3\46\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\3\46\1\332\4\46\1\0\3\46\1\0\10\46"+
    "\1\333\23\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\5\46\1\334\26\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\2\46"+
    "\1\335\31\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\46\1\336\32\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\15\46"+
    "\1\337\16\46\22\0\2\222\1\0\10\222\1\223\66\222"+
    "\1\266\21\222\12\0\2\222\5\0\1\222\1\0\1\222"+
    "\6\0\1\222\6\0\3\222\1\340\7\0\1\222\1\0"+
    "\1\222\5\0\1\222\15\0\2\222\32\0\2\157\5\0"+
    "\1\157\1\0\1\157\6\0\1\157\6\0\3\157\1\341"+
    "\7\0\1\157\1\0\1\157\5\0\1\157\15\0\2\157"+
    "\22\0\1\225\1\0\2\225\4\0\1\225\1\0\1\225"+
    "\20\0\1\342\1\343\1\342\43\0\1\157\125\0\1\344"+
    "\123\0\1\345\16\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\51\5\1\346\16\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\37\5\1\347\30\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\52\5\1\350\15\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\41\5\1\351\26\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\34\5\1\352"+
    "\33\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\51\5\1\353\16\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\17\5\1\354\50\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\35\5"+
    "\1\355\32\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\41\5\1\356\26\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\43\5\1\357\24\5"+
    "\1\0\16\5\12\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\16\46\1\360\15\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\12\46"+
    "\1\361\21\46\22\0\17\137\1\362\1\260\103\137\21\0"+
    "\3\363\1\0\1\363\1\0\1\363\2\0\2\363\4\0"+
    "\1\363\2\0\1\363\2\0\1\363\4\0\1\363\4\0"+
    "\2\363\2\0\1\363\4\0\1\363\3\0\1\363\35\0"+
    "\1\363\11\0\3\262\1\0\1\262\1\0\1\262\1\0"+
    "\1\145\2\262\1\146\1\147\2\150\1\262\2\0\1\262"+
    "\2\0\1\262\2\0\1\145\1\0\1\262\4\0\2\262"+
    "\2\0\1\262\4\0\1\262\3\0\1\262\47\0\3\263"+
    "\6\0\4\255\2\0\1\263\104\0\3\263\14\0\1\263"+
    "\121\0\2\266\120\0\1\266\124\0\1\266\100\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\16\46"+
    "\1\364\15\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\22\46\1\365\11\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\1\46"+
    "\1\366\32\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\4\46\1\367\27\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\16\46"+
    "\1\370\15\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\10\46\1\371\1\372\22\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\6\46\1\373\25\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\5\46\1\374\26\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\4\46\1\375\27\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\5\46\1\376\26\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\2\46\1\377\31\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\5\46\1\u0100\26\46\34\0"+
    "\1\46\6\0\7\46\1\0\5\46\1\u0101\2\46\1\0"+
    "\3\46\1\0\34\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\10\46\1\u0102\23\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\4\46\1\u0103\27\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\5\46\1\u0104\26\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\1\u0105\2\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\5\46\1\u0106\26\46\34\0\1\46"+
    "\6\0\7\46\1\0\5\46\1\u0107\2\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\10\46\1\u0108\23\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\6\46"+
    "\1\u0109\25\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\10\46\1\u010a\23\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\1\46\1\u010b\1\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\16\46\1\u010c\15\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\1\46"+
    "\1\u010d\32\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\46\1\u010e\32\46\34\0\1\46"+
    "\6\0\7\46\1\0\3\46\1\u010f\4\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\46\1\u0110\32\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\16\46"+
    "\1\u0111\15\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\2\46\1\u0112\31\46\34\0\1\46"+
    "\6\0\7\46\1\0\5\46\1\u0113\2\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\4\46\1\u0114\27\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\1\46"+
    "\1\u0115\32\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\1\u0116\2\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\16\46\1\u0117"+
    "\15\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\6\46\1\u0118\25\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\6\46\1\u0119"+
    "\25\46\43\0\3\222\1\0\1\222\1\0\1\222\2\0"+
    "\2\222\4\0\1\222\2\0\1\222\2\0\1\222\4\0"+
    "\1\222\4\0\2\222\2\0\1\222\4\0\1\222\3\0"+
    "\1\222\47\0\3\157\1\0\1\157\1\0\1\157\2\0"+
    "\2\157\4\0\1\157\2\0\1\157\2\0\1\157\4\0"+
    "\1\157\4\0\2\157\2\0\1\157\4\0\1\157\3\0"+
    "\1\157\131\0\1\157\60\0\1\342\42\0\1\157\20\0"+
    "\2\5\1\0\1\5\4\0\3\5\1\114\1\0\36\5"+
    "\1\u011a\31\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\47\5\1\u011b\20\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\41\5\1\u011c\26\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\37\5\1\u011d\30\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\35\5\1\u011e\32\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\47\5\1\u011f"+
    "\20\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\21\5\1\u0120\46\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\31\5\1\u0121\36\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\35\5"+
    "\1\u0122\32\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\36\5\1\u0123\31\5\1\0\16\5\12\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\10\46\1\u0124\23\46\43\0\3\363\1\0\1\363\1\0"+
    "\1\363\1\0\1\145\2\363\4\0\1\363\2\0\1\363"+
    "\2\0\1\363\2\0\1\145\1\0\1\363\4\0\2\363"+
    "\2\0\1\363\4\0\1\363\3\0\1\363\40\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\10\46"+
    "\1\u0125\23\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\1\u0126\2\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\22\46\1\u0127"+
    "\11\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\20\46\1\u0128\13\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\4\46\1\u0129"+
    "\27\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\10\46\1\u012a\23\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\1\u012b\2\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\6\46\1\u012c\25\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\6\46\1\u012d\25\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\6\46\1\u012e\25\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\11\46\1\u012f\22\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\12\46\1\u0130\21\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\u0131\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\1\46\1\u0132\32\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\1\u0133\33\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\4\46\1\u0134\27\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\10\46\1\u0135\23\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\1\u0136\33\46\34\0\1\46\6\0\7\46\1\0\3\46"+
    "\1\u0137\4\46\1\0\3\46\1\0\34\46\34\0\1\46"+
    "\6\0\7\46\1\0\5\46\1\u0138\2\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\5\46\1\u0139\26\46\34\0\1\46"+
    "\6\0\7\46\1\0\3\46\1\u013a\4\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\10\46\1\u013b\23\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\3\46"+
    "\1\u013c\30\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\1\u013d\2\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\22\46\1\u013e"+
    "\11\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\2\46\1\u013f\31\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\5\46\1\u0140"+
    "\26\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\22\46\1\u0141\11\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\5\46\1\u0142"+
    "\26\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\5\46\1\u0143\26\46\22\0\2\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\37\5\1\u0144\30\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\37\5\1\u0145\30\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\37\5\1\251\30\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\35\5\1\u0146"+
    "\32\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\17\5\1\346\50\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\53\5\1\u0147\14\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\43\5"+
    "\1\u0148\24\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\41\5\1\u0149\26\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\31\5\1\u014a\36\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\37\5\1\u014b\30\5\1\0\16\5\12\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\4\46\1\u014c"+
    "\27\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\1\u014d\2\46\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\1\u014e\2\46\1\0\34\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\5\46\1\u014f\26\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\1\u0150\2\46\1\0\34\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\1\u0151\2\46\1\0"+
    "\34\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\4\46\1\u0152\27\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\10\46\1\u0153"+
    "\23\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\5\46\1\u0154\26\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\12\46\1\u0155"+
    "\21\46\34\0\1\46\6\0\7\46\1\0\1\46\1\u0156"+
    "\6\46\1\0\3\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\10\46\1\u0157"+
    "\23\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\1\u0158\33\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\15\46\1\u0159\16\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\5\46\1\u015a\26\46\34\0\1\46\6\0\7\46"+
    "\1\0\3\46\1\u015b\4\46\1\0\3\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\4\46\1\u015c\27\46\34\0\1\46\6\0\7\46"+
    "\1\0\3\46\1\u015d\4\46\1\0\3\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\1\u015e\33\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\1\u015f\2\46\1\0\34\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\4\46"+
    "\1\u0160\27\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\6\46\1\u0161\25\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\4\46"+
    "\1\u0162\27\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\10\46\1\u0163\23\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\16\46"+
    "\1\u0164\15\46\22\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\40\5\1\u0165\27\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\50\5\1\u0166\17\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\25\5\1\u0167\42\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\36\5\1\u0168\31\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\36\5\1\u0169"+
    "\31\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\12\5\1\u016a\55\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\20\5\1\u016b\47\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\16\5"+
    "\1\u016c\23\5\1\u0168\25\5\1\0\16\5\12\0\1\46"+
    "\6\0\7\46\1\0\3\46\1\u016d\4\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\5\46\1\u016e\26\46\34\0\1\46"+
    "\6\0\7\46\1\0\5\46\1\u016f\2\46\1\0\3\46"+
    "\1\0\34\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\u0170\33\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\5\46\1\u0171"+
    "\26\46\34\0\1\46\6\0\7\46\1\0\1\46\1\u0172"+
    "\6\46\1\0\3\46\1\0\34\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\10\46\1\u0173"+
    "\23\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\1\u0174\33\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\u0175\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\26\46\1\u0176\5\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\1\46\1\u0177\14\46"+
    "\1\u0178\15\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\1\u0179\33\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\4\46\1\u017a"+
    "\27\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\1\u017b\2\46\1\0\34\46\34\0\1\46\6\0\7\46"+
    "\1\0\5\46\1\u017c\2\46\1\0\3\46\1\0\34\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\12\46\1\u017d\21\46\22\0\2\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\34\5\1\u017e\33\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\14\5"+
    "\1\u017f\53\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\53\5\1\u0180\14\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\43\5\1\u0181\1\u0182"+
    "\23\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\25\5\1\u0183\42\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\35\5\1\u0184\32\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\35\5"+
    "\1\u0185\32\5\1\0\16\5\12\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\u0186\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\12\46\1\u0187\21\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\u0188\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\10\46\1\u0189\23\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\6\46\1\u018a\25\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\26\46\1\u018b\5\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\2\46\1\u018c\1\0\34\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\26\46\1\u018d\5\46\34\0\1\46\6\0\7\46\1\0"+
    "\1\46\1\u018e\6\46\1\0\3\46\1\0\34\46\34\0"+
    "\1\46\6\0\7\46\1\0\10\46\1\0\3\46\1\0"+
    "\11\46\1\u018f\22\46\34\0\1\46\6\0\7\46\1\0"+
    "\10\46\1\0\3\46\1\0\1\u0190\33\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\16\46"+
    "\1\u0191\15\46\34\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\6\46\1\u0192\25\46\34\0\1\46"+
    "\6\0\7\46\1\0\10\46\1\0\3\46\1\0\26\46"+
    "\1\u0193\5\46\22\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\41\5\1\u0194\26\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\47\5\1\u0195\20\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\54\5\1\u0196\13\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\16\5\1\u0197\51\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\36\5\1\u0198"+
    "\31\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\21\5\1\u0199\46\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\26\5\1\u019a\41\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\17\5"+
    "\1\u019b\50\5\1\0\16\5\12\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\16\46\1\u019c\15\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\6\46\1\u019d\25\46\34\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\1\u019e\2\46\1\0\34\46\34\0"+
    "\1\46\6\0\7\46\1\0\3\46\1\u019f\4\46\1\0"+
    "\3\46\1\0\34\46\22\0\2\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\42\5\1\u0168\25\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\41\5\1\u01a0"+
    "\26\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\32\5\1\u01a1\35\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\21\5\1\u01a2\46\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\34\5"+
    "\1\u01a3\33\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\33\5\1\u0194\34\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\37\5\1\u01a4\30\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\41\5\1\u01a5\26\5\1\0\16\5\12\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\11\46\1\u01a6"+
    "\22\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\17\46\1\u01a7\14\46\34\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\1\46\1\u01a8"+
    "\32\46\22\0\2\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\46\5\1\u0194\21\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\25\5\1\u01a9\42\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\25\5"+
    "\1\u01aa\42\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\36\5\1\u01ab\31\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\47\5\1\u01ac\20\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\36\5\1\u01ad\31\5\1\0\16\5\12\0\1\46\6\0"+
    "\7\46\1\0\10\46\1\0\3\46\1\0\11\46\1\u01ae"+
    "\22\46\34\0\1\46\6\0\7\46\1\0\10\46\1\0"+
    "\3\46\1\0\1\u01af\33\46\22\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\u01b0\1\114\1\0\70\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\31\5\1\u01b1"+
    "\36\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\25\5\1\u01b2\42\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\37\5\1\u01b3\30\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\37\5"+
    "\1\u0168\30\5\1\0\16\5\12\0\1\46\6\0\7\46"+
    "\1\0\10\46\1\0\3\46\1\0\5\46\1\u01b4\26\46"+
    "\34\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\16\46\1\u01b5\15\46\22\0\2\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\36\5\1\u01b6\31\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\41\5"+
    "\1\u01b7\26\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\43\5\1\u01b8\24\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\35\5\1\u01b9\32\5"+
    "\1\0\16\5\12\0\1\46\6\0\7\46\1\0\10\46"+
    "\1\0\3\46\1\0\6\46\1\u01ba\25\46\34\0\1\46"+
    "\6\0\7\46\1\0\3\46\1\u01bb\4\46\1\0\3\46"+
    "\1\0\34\46\22\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\37\5\1\u01bc\30\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\35\5\1\u01bd\32\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\36\5\1\u01be\31\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\36\5\1\u0194\31\5\1\0\16\5"+
    "\12\0\1\46\6\0\7\46\1\0\10\46\1\0\3\46"+
    "\1\0\10\46\1\u01bf\23\46\22\0\2\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\42\5\1\u01c0\25\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\32\5"+
    "\1\u01c1\35\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\25\5\1\u01c2\42\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\35\5\1\u01c3\32\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\25\5\1\u0194\42\5\1\0\20\5\1\0\1\5\4\0"+
    "\3\5\1\114\1\0\41\5\1\u01c4\26\5\1\0\20\5"+
    "\1\0\1\5\4\0\3\5\1\114\1\0\32\5\1\u01c5"+
    "\35\5\1\0\20\5\1\0\1\5\4\0\3\5\1\114"+
    "\1\0\45\5\1\u01c6\22\5\1\0\20\5\1\0\1\5"+
    "\4\0\3\5\1\114\1\0\25\5\1\u0168\42\5\1\0"+
    "\20\5\1\0\1\5\4\0\3\5\1\114\1\0\32\5"+
    "\1\u01c7\35\5\1\0\20\5\1\0\1\5\4\0\3\5"+
    "\1\114\1\0\43\5\1\u01c8\24\5\1\0\20\5\1\0"+
    "\1\5\4\0\3\5\1\114\1\0\21\5\1\u01c9\46\5"+
    "\1\0\20\5\1\0\1\5\4\0\3\5\1\114\1\0"+
    "\17\5\1\u01b9\50\5\1\0\16\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31164];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\15\1\2\11\25\1\1\11\26\1"+
    "\11\11\1\0\13\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\0\2\11\1\1\3\0\3\1\2\11\3\1\2\0"+
    "\3\1\3\11\34\1\3\0\2\1\3\11\1\1\6\11"+
    "\13\1\2\11\2\1\2\0\2\1\1\0\1\1\1\11"+
    "\51\1\4\0\2\11\14\1\1\11\1\0\326\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(D_WAITING_PLATFORM); return KndTypes.DEF_KEY_UNKNOWN;
            } 
            // fall through
          case 107: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 108: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 109: break;
          case 4: 
            { yybegin(D_WAITING_VALUE); return KndTypes.DEF_SEPARATOR;
            } 
            // fall through
          case 110: break;
          case 5: 
            { return KndTypes.DEF_DOT;
            } 
            // fall through
          case 111: break;
          case 6: 
            { return KndTypes.DEF_PLATFORM;
            } 
            // fall through
          case 112: break;
          case 7: 
            { yybegin(YYINITIAL); return KndTypes.DEF_VALUE;
            } 
            // fall through
          case 113: break;
          case 8: 
            { return KndTypes.C_COLON;
            } 
            // fall through
          case 114: break;
          case 9: 
            { return KndTypes.C_DOT;
            } 
            // fall through
          case 115: break;
          case 10: 
            { return KndTypes.C_EX_MARK;
            } 
            // fall through
          case 116: break;
          case 11: 
            { return KndTypes.C_SLASH;
            } 
            // fall through
          case 117: break;
          case 12: 
            { return KndTypes.C_MULT;
            } 
            // fall through
          case 118: break;
          case 13: 
            { return KndTypes.C_I_CONSTANT;
            } 
            // fall through
          case 119: break;
          case 14: 
            { return KndTypes.C_IDENTIFIER;
            } 
            // fall through
          case 120: break;
          case 15: 
            { return KndTypes.C_PLUS;
            } 
            // fall through
          case 121: break;
          case 16: 
            { return KndTypes.C_QU_MARK;
            } 
            // fall through
          case 122: break;
          case 17: 
            { return KndTypes.C_MINUS;
            } 
            // fall through
          case 123: break;
          case 18: 
            { return KndTypes.C_GREATER;
            } 
            // fall through
          case 124: break;
          case 19: 
            { return KndTypes.C_EQ_SIGN;
            } 
            // fall through
          case 125: break;
          case 20: 
            { return KndTypes.C_LESS;
            } 
            // fall through
          case 126: break;
          case 21: 
            { return KndTypes.C_PERCENT;
            } 
            // fall through
          case 127: break;
          case 22: 
            { return KndTypes.C_AND;
            } 
            // fall through
          case 128: break;
          case 23: 
            { return KndTypes.C_CARET;
            } 
            // fall through
          case 129: break;
          case 24: 
            { return KndTypes.C_VBAR;
            } 
            // fall through
          case 130: break;
          case 25: 
            { return KndTypes.C_SEMICOLON;
            } 
            // fall through
          case 131: break;
          case 26: 
            { return KndTypes.C_L_CURLY;
            } 
            // fall through
          case 132: break;
          case 27: 
            { return KndTypes.C_R_CURLY;
            } 
            // fall through
          case 133: break;
          case 28: 
            { return KndTypes.C_COMMA;
            } 
            // fall through
          case 134: break;
          case 29: 
            { return KndTypes.C_L_PAREN;
            } 
            // fall through
          case 135: break;
          case 30: 
            { return KndTypes.C_R_PAREN;
            } 
            // fall through
          case 136: break;
          case 31: 
            { return KndTypes.C_L_BRACKET;
            } 
            // fall through
          case 137: break;
          case 32: 
            { return KndTypes.C_R_BRACKET;
            } 
            // fall through
          case 138: break;
          case 33: 
            { return KndTypes.C_TILDE;
            } 
            // fall through
          case 139: break;
          case 34: 
            { return KndTypes.COMMENT;
            } 
            // fall through
          case 140: break;
          case 35: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 141: break;
          case 36: 
            { return KndTypes.C_F_CONSTANT;
            } 
            // fall through
          case 142: break;
          case 37: 
            { return KndTypes.C_NE_OP;
            } 
            // fall through
          case 143: break;
          case 38: 
            { return KndTypes.C_DIV_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 39: 
            { return KndTypes.C_MUL_ASSIGN;
            } 
            // fall through
          case 145: break;
          case 40: 
            { return KndTypes.C_INC_OP;
            } 
            // fall through
          case 146: break;
          case 41: 
            { return KndTypes.C_ADD_ASSIGN;
            } 
            // fall through
          case 147: break;
          case 42: 
            { return KndTypes.C_DEC_OP;
            } 
            // fall through
          case 148: break;
          case 43: 
            { return KndTypes.C_PTR_OP;
            } 
            // fall through
          case 149: break;
          case 44: 
            { return KndTypes.C_SUB_ASSIGN;
            } 
            // fall through
          case 150: break;
          case 45: 
            { return KndTypes.C_IF;
            } 
            // fall through
          case 151: break;
          case 46: 
            { return KndTypes.C_DO;
            } 
            // fall through
          case 152: break;
          case 47: 
            { return KndTypes.C_STRING_LITERAL;
            } 
            // fall through
          case 153: break;
          case 48: 
            { return KndTypes.C_RIGHT_OP;
            } 
            // fall through
          case 154: break;
          case 49: 
            { return KndTypes.C_GE_OP;
            } 
            // fall through
          case 155: break;
          case 50: 
            { return KndTypes.C_EQ_OP;
            } 
            // fall through
          case 156: break;
          case 51: 
            { return KndTypes.C_LE_OP;
            } 
            // fall through
          case 157: break;
          case 52: 
            { return KndTypes.C_LEFT_OP;
            } 
            // fall through
          case 158: break;
          case 53: 
            { return KndTypes.C_MOD_ASSIGN;
            } 
            // fall through
          case 159: break;
          case 54: 
            { return KndTypes.C_AND_ASSIGN;
            } 
            // fall through
          case 160: break;
          case 55: 
            { return KndTypes.C_AND_OP;
            } 
            // fall through
          case 161: break;
          case 56: 
            { return KndTypes.C_XOR_ASSIGN;
            } 
            // fall through
          case 162: break;
          case 57: 
            { return KndTypes.C_OR_ASSIGN;
            } 
            // fall through
          case 163: break;
          case 58: 
            { return KndTypes.C_OR_OP;
            } 
            // fall through
          case 164: break;
          case 59: 
            { yybegin(C_END); return KndTypes.DELIM;
            } 
            // fall through
          case 165: break;
          case 60: 
            { return KndTypes.C_ELLIPSIS;
            } 
            // fall through
          case 166: break;
          case 61: 
            { return KndTypes.C_FOR;
            } 
            // fall through
          case 167: break;
          case 62: 
            { return KndTypes.C_INT;
            } 
            // fall through
          case 168: break;
          case 63: 
            { return KndTypes.C_RIGHT_ASSIGN;
            } 
            // fall through
          case 169: break;
          case 64: 
            { return KndTypes.C_LEFT_ASSIGN;
            } 
            // fall through
          case 170: break;
          case 65: 
            { return KndTypes.C_VOID;
            } 
            // fall through
          case 171: break;
          case 66: 
            { return KndTypes.C_LONG;
            } 
            // fall through
          case 172: break;
          case 67: 
            { return KndTypes.C_CHAR;
            } 
            // fall through
          case 173: break;
          case 68: 
            { return KndTypes.C_CASE;
            } 
            // fall through
          case 174: break;
          case 69: 
            { return KndTypes.C_ELSE;
            } 
            // fall through
          case 175: break;
          case 70: 
            { return KndTypes.C_ENUM;
            } 
            // fall through
          case 176: break;
          case 71: 
            { return KndTypes.C_AUTO;
            } 
            // fall through
          case 177: break;
          case 72: 
            { return KndTypes.C_GOTO;
            } 
            // fall through
          case 178: break;
          case 73: 
            { return KndTypes.C_FLOAT;
            } 
            // fall through
          case 179: break;
          case 74: 
            { return KndTypes.C_UNION;
            } 
            // fall through
          case 180: break;
          case 75: 
            { return KndTypes.C_BREAK;
            } 
            // fall through
          case 181: break;
          case 76: 
            { return KndTypes.C_CONST;
            } 
            // fall through
          case 182: break;
          case 77: 
            { return KndTypes.C_SHORT;
            } 
            // fall through
          case 183: break;
          case 78: 
            { return KndTypes.C_WHILE;
            } 
            // fall through
          case 184: break;
          case 79: 
            { return KndTypes.C_BOOL;
            } 
            // fall through
          case 185: break;
          case 80: 
            { return KndTypes.C_INLINE;
            } 
            // fall through
          case 186: break;
          case 81: 
            { return KndTypes.C_EXTERN;
            } 
            // fall through
          case 187: break;
          case 82: 
            { return KndTypes.C_RETURN;
            } 
            // fall through
          case 188: break;
          case 83: 
            { return KndTypes.C_SIGNED;
            } 
            // fall through
          case 189: break;
          case 84: 
            { return KndTypes.C_SIZEOF;
            } 
            // fall through
          case 190: break;
          case 85: 
            { return KndTypes.C_STRUCT;
            } 
            // fall through
          case 191: break;
          case 86: 
            { return KndTypes.C_STATIC;
            } 
            // fall through
          case 192: break;
          case 87: 
            { return KndTypes.C_SWITCH;
            } 
            // fall through
          case 193: break;
          case 88: 
            { return KndTypes.C_DOUBLE;
            } 
            // fall through
          case 194: break;
          case 89: 
            { yybegin(D_WAITING_PLATFORM); return KndTypes.DEF_KEY_KNOWN;
            } 
            // fall through
          case 195: break;
          case 90: 
            { return KndTypes.C_TYPEDEF;
            } 
            // fall through
          case 196: break;
          case 91: 
            { return KndTypes.C_DEFAULT;
            } 
            // fall through
          case 197: break;
          case 92: 
            { return KndTypes.C_ATOMIC;
            } 
            // fall through
          case 198: break;
          case 93: 
            { return KndTypes.C_VOLATILE;
            } 
            // fall through
          case 199: break;
          case 94: 
            { return KndTypes.C_UNSIGNED;
            } 
            // fall through
          case 200: break;
          case 95: 
            { return KndTypes.C_CONTINUE;
            } 
            // fall through
          case 201: break;
          case 96: 
            { return KndTypes.C_RESTRICT;
            } 
            // fall through
          case 202: break;
          case 97: 
            { return KndTypes.C_REGISTER;
            } 
            // fall through
          case 203: break;
          case 98: 
            { return KndTypes.C_COMPLEX;
            } 
            // fall through
          case 204: break;
          case 99: 
            { return KndTypes.C_FUNC_NAME;
            } 
            // fall through
          case 205: break;
          case 100: 
            { return KndTypes.C_ALIGNOF;
            } 
            // fall through
          case 206: break;
          case 101: 
            { return KndTypes.C_ALIGNAS;
            } 
            // fall through
          case 207: break;
          case 102: 
            { return KndTypes.C_GENERIC;
            } 
            // fall through
          case 208: break;
          case 103: 
            { return KndTypes.C_NORETURN;
            } 
            // fall through
          case 209: break;
          case 104: 
            { return KndTypes.C_IMAGINARY;
            } 
            // fall through
          case 210: break;
          case 105: 
            { return KndTypes.C_THREAD_LOCAL;
            } 
            // fall through
          case 211: break;
          case 106: 
            { return KndTypes.C_STATIC_ASSERT;
            } 
            // fall through
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
